// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id          String   @id @default(uuid())
  sid         String   @unique
  data        String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Users {
  id       Int       @id @default(autoincrement())
  username String
  email    String    @unique
  password String
  imgUrl   String
  comments Comments[]
  posts Posts[]
  likedPosts Likes[]
  isAdmin Boolean @default(false)
}

model Posts {
  id              Int       @id @default(autoincrement())
  title           String @default("No title")
  postDescription String @default("No description")
  comments        Comments[]
  addedAt         DateTime  @default(now())
  isPublished          Boolean @default(false)
  imgUrl String?
  postedBy Int?
  user Users? @relation(fields: [postedBy], references: [id])
  likedBy Likes[]
}

model Comments {
  id          Int      @id @default(autoincrement())
  description String
  addedAt     DateTime @default(now())
  postId      Int
  userId      Int
  post        Posts    @relation(fields: [postId], references: [id])
  user        Users    @relation(fields: [userId], references: [id])
}

model Likes {
  id Int @id @default(autoincrement())
  userId Int
  postId Int
    post        Posts    @relation(fields: [postId], references: [id])
  user Users @relation(fields: [userId], references: [id])

  @@unique([userId, postId]) // each user can like a post only once
}